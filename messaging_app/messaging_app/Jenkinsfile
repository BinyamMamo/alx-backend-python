pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], // <-- Explicit branch
                    userRemoteConfigs: [[
                        url: 'https://github.com/BinyamMamo/alx-backend-python.git',
                        credentialsId: 'github-credentials' // <-- Explicit credentialsId
                    ]]
                ])
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    cd messaging_app/messaging
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                sh '''
                    cd messaging_app/messaging
                    . venv/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                sh '''
                    cd messaging_app/messaging
                    . venv/bin/activate
                    export DJANGO_SETTINGS_MODULE=messaging.settings
                    export DB_NAME=test_messaging_app
                    export DB_USER=root
                    export DB_PASSWORD=
                    export DB_HOST=localhost
                    export DB_PORT=3306
                    export SECRET_KEY=test-secret-key
                    export DEBUG=True
                    export ALLOWED_HOSTS=localhost,127.0.0.1
                    
                    # Run tests
                    python -m pytest chat/test_*.py -v --tb=short
                '''
            }
            post {
                always {
                    echo 'Archiving test results...'
                    // Archive test reports if they exist
                    archiveArtifacts artifacts: 'messaging_app/messaging/test-reports/**/*', fingerprint: true, allowEmptyArchive: true
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                echo 'Running code quality checks with flake8...'
                sh '''
                    cd messaging_app/messaging
                    . venv/bin/activate
                    
                    # Run flake8 for code quality
                    flake8 --max-line-length=88 --exclude=venv,migrations,__pycache__,*.pyc,settings.py . || true
                '''
            }
        }
        
        stage('Generate Test Report') {
            steps {
                echo 'Generating test coverage report...'
                sh '''
                    cd messaging_app/messaging
                    . venv/bin/activate
                    export DJANGO_SETTINGS_MODULE=messaging.settings
                    export DB_NAME=test_messaging_app
                    export DB_USER=root
                    export DB_PASSWORD=
                    export DB_HOST=localhost
                    export DB_PORT=3306
                    export SECRET_KEY=test-secret-key
                    export DEBUG=True
                    export ALLOWED_HOSTS=localhost,127.0.0.1
                    
                    # Generate coverage report
                    python -m pytest --cov=. --cov-report=html --cov-report=xml chat/test_*.py || true
                '''
            }
            post {
                always {
                    echo 'Publishing test reports...'
                    // Publish HTML coverage report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'messaging_app/messaging/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def app = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "./messaging_app")
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-hub-credentials') {
                        app.push("${DOCKER_TAG}")
                        app.push("latest")
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-hub-credentials') {
                        echo "Successfully pushed ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        echo "Successfully pushed ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Clean Up') {
            steps {
                echo 'Cleaning up Docker images...'
                sh '''
                    # Remove local Docker images to save space
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_IMAGE}:latest || true
                    
                    # Clean up build artifacts
                    cd messaging_app/messaging
                    rm -rf venv
                    rm -rf htmlcov
                    rm -rf .coverage
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            // Clean workspace
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded! ✅'
            // You can add notifications here (email, Slack, etc.)
        }
        failure {
            echo 'Pipeline failed! ❌'
            // You can add failure notifications here
        }
    }
}
