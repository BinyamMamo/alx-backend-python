name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_messaging_app
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_ROOT_PASSWORD: root_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd messaging_app/messaging
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot_password --silent; do
          sleep 1
        done

    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=messaging.settings" >> $GITHUB_ENV
        echo "DB_NAME=test_messaging_app" >> $GITHUB_ENV
        echo "DB_USER=root" >> $GITHUB_ENV
        echo "DB_PASSWORD=root_password" >> $GITHUB_ENV
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_PORT=3306" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV

    - name: Run Django migrations
      run: |
        cd messaging_app/messaging
        python manage.py migrate --noinput

    - name: Run Django tests
      run: |
        cd messaging_app/messaging
        python -m pytest chat/test_*.py -v --tb=short --cov=. --cov-report=xml --cov-report=html

    - name: Code Quality Check with flake8
      run: |
        cd messaging_app/messaging
        flake8 --max-line-length=88 --exclude=venv,migrations,__pycache__,*.pyc,settings.py . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Full flake8 check (warnings only)
        flake8 --max-line-length=88 --exclude=venv,migrations,__pycache__,*.pyc,settings.py . --count --exit-zero --max-complexity=10 --statistics

    - name: Generate coverage report
      run: |
        cd messaging_app/messaging
        python -m pytest --cov=. --cov-report=xml --cov-report=html chat/test_*.py

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./messaging_app/messaging/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage as artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: messaging_app/messaging/htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: messaging_app/messaging/test-reports/

  security-check:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install safety
      run: |
        pip install safety

    - name: Run security check
      run: |
        cd messaging_app/messaging
        safety check -r requirements.txt --continue-on-error

  lint-dockerfile:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: messaging_app/Dockerfile
        failure-threshold: warning
